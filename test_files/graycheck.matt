

dev CK1 = CLOCK {
    Period : 1;
}


// Binary Counter

dev b0 = DTYPE {
    DATA : b0.QBar;
    CLK : CK1;
}

dev b1 = DTYPE {
    DATA : b1.QBar;
    CLK : b0.QBar;
}

dev b2 = DTYPE {
    DATA : b2.QBar;
    CLK : b1.QBar;
}

// monitor b0, b1, b2;



// Gray code conversion

dev G0 = XOR {
    I1 : b0.Q;
    I2 : b1.Q;
}

dev G1 = XOR {
    I1 : b1.Q;
    I2 : b2.Q;
}

dev G2 = AND {
    I1 : b2.Q;
}

monitor G0, G1, G2;



// Delay gray code signals

dev CK1Bar = NAND {
    I1 : CK1;
    I2 : CK1;
}

dev G0D = DTYPE {
   DATA : G0;
   CLK : CK1Bar;
}

dev G1D = DTYPE {
   DATA : G1;
   CLK : CK1Bar;
}

dev G2D = DTYPE {
   DATA : G2;
   CLK : CK1Bar;
}

// monitor G0D, G1D, G2D;



// Check for changes

dev G0C = XOR {
    I1 : G0;
    I2 : G0D.Q;
}
dev G1C = XOR {
    I1 : G1;
    I2 : G1D.Q;
}
dev G2C = XOR {
    I1 : G2;
    I2 : G2D.Q;
}

monitor G0C, G1C, G2C;




// Need negated versions for next step

dev G0CBar = NAND {
    I1 : G0C;
    I2 : G0C;
}
dev G1CBar = NAND {
    I1 : G1C;
    I2 : G1C;
}
dev G2CBar = NAND {
    I1 : G2C;
    I2 : G2C;
}

// monitor G0CBar, G1CBar, G2CBar;


// Sum of Products

dev sop1 = AND {
    I1 : G0CBar;
    I2 : G1CBar;
    I3 : G2C;
}
dev sop2 = AND {
    I1 : G0CBar;
    I2 : G1C;
    I3 : G2CBar;
}
dev sop3 = AND {
    I1 : G0C;
    I2 : G1CBar;
    I3 : G2CBar;
}

// monitor sop1, sop2, sop3;


dev Invalid = NOR {
    I1 : sop1;
    I2 : sop2;
    I3 : sop3;
    I4 : CK1Bar;
}

monitor Invalid;

